================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-06-15T18:49:59.412090

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
__pycache__\components.cpython-312.pyc
app.py
assets\Resume.pdf
assets\globals.css
assets\images\evva-logo.png
assets\images\letsai-logo.png
assets\images\profile.jpg
components.py
pages\__pycache__\blog.cpython-312.pyc
pages\__pycache__\home.cpython-312.pyc
pages\blog.py
pages\home.py
public\data.json
requirements.txt

================================================================
Repository Files
================================================================

================
File: app.py
================
import dash
from dash import html, dcc, Input, Output
import dash_bootstrap_components as dbc
import json
from pages import home, blog
import dash_svg as svg

app = dash.Dash(__name__, suppress_callback_exceptions=True)

# Load data from JSON file
try:
    with open('public/data.json', 'r') as f:
        data = json.load(f)
except Exception as e:
    print(f"Error loading data.json: {e}")
    data = {'workExperience': [], 'blogData': []}

# Navigation bar component
navbar = html.Div(
    html.Nav(
        html.Div(
            [
                # Left-side navigation links
                html.Div(
                    [
                        html.Span('/', className='portfolio-nav-separator'),
                        dcc.Link('home', href='/', className='portfolio-nav-link'),
                        html.Span('/', className='portfolio-nav-separator'),
                        dcc.Link('writings', href='/blog', className='portfolio-nav-link-gray')
                    ],
                    className='portfolio-nav-links'
                ),

                # Right-side social icons
                html.Div(
                    [
                        html.A(
                            svg.Svg(
                                [
                                    svg.Path(
                                        d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
                                    )
                                ],
                                width='20',
                                height='20',
                                fill='currentColor',
                                viewBox='0 0 24 24',
                                xmlns='http://www.w3.org/2000/svg'
                            ),
                            href='https://www.linkedin.com/in/lakhaniaditya/',
                            target='_blank',
                            rel='noopener noreferrer',
                            className='portfolio-social-link'
                        ),
                        html.A(
                            svg.Svg(
                                [
                                    svg.Path(
                                        d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
                                    )
                                ],
                                width='20',
                                height='20',
                                fill='currentColor',
                                viewBox='0 0 24 24',
                                xmlns='http://www.w3.org/2000/svg'
                            ),
                            href='https://github.com/adityalakhani',
                            target='_blank',
                            rel='noopener noreferrer',
                            className='portfolio-social-link'
                        ),
                    ],
                    className='portfolio-social-links'
                )
            ],
            className='portfolio-nav-container'
        )
    ),
    className='portfolio-nav'
)

# Main layout
app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    navbar,
    html.Div(id='page-content', className='portfolio-container')
])

@app.callback(
    Output('page-content', 'children'),
    Input('url', 'pathname')
)
def display_page(pathname):
    if pathname == '/blog':
        return blog.layout
    elif pathname.startswith('/blog/'):
        slug = pathname.split('/')[-1]
        blog_post = next((b for b in data['blogData'] if b['slug'] == slug), None)
        if blog_post:
            return html.Div([
                html.H1(blog_post['title'], className='text-4xl font-bold margin-bottom-md'),
                html.P(f"Posted on: {blog_post['date_posted']}", className='text-small text-gray-400 margin-bottom-sm'),
                html.P(blog_post['desc'], className='text-large margin-bottom-md'),
            ], className='portfolio-blog-post')
        return html.Div("404 - Not Found", className='text-xl text-center')
    return home.layout

if __name__ == '__main__':
    app.run(debug=True)

================
File: components.py
================
from dash import html
from dash_iconify import DashIconify

def BlogTile(blog, show_tags=True):
    """Component for rendering a blog tile, consistent with BlogTile.jsx"""
    return html.Div([
        html.P(
            blog.get('date_posted', 'N/A'),
            className='portfolio-blog-date portfolio-timeline'
        ),
        html.A(
            html.H3(
                blog['title'],
                className='portfolio-blog-title'
            ),
            href=f"/blog/{blog['slug']}",
            className='portfolio-blog-title-link'
        ),
        html.P(
            blog['desc'],
            className='portfolio-blog-desc'
        ),
        html.Div(
            [
                html.Span(
                    f"#{tag}",
                    className='portfolio-blog-tag'
                ) for tag in blog.get('tags', [])
            ] if show_tags else [],
            className='flex-gap-xs'
        )
    ], className='portfolio-blog-card')

def ExperienceTile(work):
    """Component for rendering an experience tile, consistent with ExperienceTile.jsx"""
    return html.Div([
        html.Div([
            # Optional company logo
            html.Img(
                src=work.get('logo', ''),
                className='portfolio-experience-logo',
                style={'display': 'block' if work.get('logo') else 'none'}
            ),
            html.Div([
                html.P(
                    f"{work['start_date']} - {work['end_date']}",
                    className='portfolio-experience-date portfolio-timeline'
                ),
                html.H3(
                    f"{work['title']}, {work['company']}",
                    className='portfolio-experience-title'
                ),
                html.P(
                    work['roledesc'],
                    className='portfolio-experience-desc'
                ),
                html.Div(
                    [
                        html.Span(
                            skill,
                            className='portfolio-experience-skill'
                        ) for skill in work.get('skills', [])
                    ],
                    className='portfolio-experience-skills'
                )
            ], className='portfolio-experience-content')
        ], className='portfolio-experience-card-content')
    ], className='portfolio-experience-card')

def SocialTiles():
    """Component for rendering social media links, consistent with SocialTiles.jsx"""
    return html.Div([
        html.A(
            DashIconify(icon="lucide:github", width=18, height=18),
            href="https://github.com/adityalakhani",
            className='portfolio-social-link'
        ),
        html.A(
            DashIconify(icon="lucide:file", width=18, height=18),
            href="/Resume.pdf",
            className='portfolio-social-link'
        ),
        html.A(
            DashIconify(icon="lucide:linkedin", width=18, height=18),
            href="https://www.linkedin.com/in/lakhaniaditya/",
            className='portfolio-social-link'
        ),
        # html.A(
        #     DashIconify(icon="lucide:instagram", width=18, height=18),
        #     href="https://www.instagram.com/thecortguy/",
        #     className='portfolio-social-link'
        # ),
        # html.A(
        #     DashIconify(icon="lucide:dribbble", width=18, height=18),
        #     href="https://dribbble.com/Sarthakischauhan",
        #     className='portfolio-social-link'
        # ),
    ], className='portfolio-social-tiles')

================
File: assets\globals.css
================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@200;400;500&family=IBM+Plex+Mono:wght@100;300;400&display=swap');

/* Root variables for dark theme */
:root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 15, 17, 42;
    --background-end-rgb: 15, 17, 42;
    --background-start-hex: #111010;
    --font-inter: Inter, sans-serif;
}

/* Ensure body and html donâ€™t constrain width */
html, body {
    width: 100%;
    margin: 0;
    padding: 0;
    font-family: var(--font-inter);
    color: rgb(var(--foreground-rgb));
    background: var(--background-start-hex);
    line-height: 1.6;
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
}

/* Container */
.portfolio-container {
    display: flex;
    flex-direction: column;
    max-width: 50rem;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;
    padding: 0;
    box-sizing: border-box;
}

/* Navbar container */
.portfolio-nav-container {
    max-width: 50rem;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    align-items: center;
    -webkit-font-smoothing: antialiased;
    user-select: none;
    font-family: var(--font-inter);
    box-sizing: border-box;
    border: 0 solid transparent;
}

/* Navigation bar */
.portfolio-nav {
    padding: 16px;
}

/* Navigation links container */
.portfolio-nav-links {
    display: flex;
    align-items: center;
}

/* Navigation link */
.portfolio-nav-link {
    font-size: 1.125rem;
    color: #ffffff;
    transition: color 0.3s;
    letter-spacing: 0.05em;
    font-weight: 400;
}

.portfolio-nav-link:hover {
    color: #ffffff;
}

.portfolio-nav-link-gray {
    font-size: 1.125rem;
    color: #9ca3af;
    transition: color 0.3s;
    letter-spacing: 0.05em;
    font-weight: 400;
}

.portfolio-nav-link-gray:hover {
    color: #ffffff;
}

/* Social links container */
.portfolio-social-links {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-left: auto;
}

/* Social link */
.portfolio-social-link {
    color: #9ca3af;
    transition: color 0.3s;
    display: inline-block;
}

/* Text utilities */
.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-large { font-size: 1rem; line-height: 1.75rem; }
.text-medium { font-size: 1rem; line-height: 1.5rem; }
.text-small { font-size: 0.875rem; line-height: 1.25rem; }
.font-bold { font-weight: 700; }
.font-semibold { font-weight: 600; }
.font-medium { font-weight: 500; }
.font-regular { font-weight: 400; }

/* Margin and padding utilities */
.margin-bottom-xs { margin-bottom: 0.25rem; }
.margin-bottom-sm { margin-bottom: 0.5rem; }
.margin-bottom-md { margin-bottom: 1rem; }
.margin-bottom-lg { margin-bottom: 1.5rem; }
.margin-bottom-xl { margin-bottom: 2rem; }
.padding-x-md { padding-left: 0.75rem; padding-right: 0.75rem; }
.padding-y-sm { padding-top: 0.25rem; padding-bottom: 0.25rem; }
.margin-right-sm { margin-right: 0.5rem; }
.margin-right-md { margin-right: 1rem; }
.margin-top-md { margin-top: 1rem; }
.margin-top-lg { margin-top: 1.5rem; }
.margin-top-xl { margin-top: 2rem; }
.margin-top-2xl { margin-top: 2.5rem; }
.margin-top-3xl { margin-top: 4rem; }

/* Border and background utilities */
.rounded-full { border-radius: 9999px; }
.border { border-width: 1px; }
.border-white-50 { border-color: rgba(255, 255, 255, 0.5); }
.bg-transparent { background-color: transparent; }
.bg-gray-700 { background-color: #4b5563; }
.bg-white { background-color: #ffffff; }

/* Color utilities */
.text-gray-400 { color: #9ca3af; }
.text-white { color: #ffffff; }
.text-black { color: #000000; }
.text-blue-400 { color: #79c0ff; }
.hover-text-blue-400:hover { color: #79c0ff; }
.hover-text-white:hover { color: #ffffff; }

/* Flex utilities */
.flex-gap-xs { display: flex; gap: 0.125rem; }
.flex-gap-sm { display: flex; gap: 0.5rem; }
.flex-gap-md { display: flex; gap: 1rem; }
.flex-wrap { flex-wrap: wrap; }

/* Other utilities */
.letter-spacing-wide { letter-spacing: 0.05em; }
.transition-colors { transition-property: color; transition-duration: 0.3s; }

/* Profile picture */
.portfolio-profile-pic {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid white;
}

/* Sections */
.portfolio-section {
    margin-top: 4rem;
    margin-bottom: 2rem;
}

/* Work and blog items */
.portfolio-experience-card {
    margin-top: 48px;
    border-radius: 8px;
}

.portfolio-blog-card {
    margin-top: 36px;
    border-radius: 8px;
}

/* Blog post */
.portfolio-blog-post {
    margin-top: 2.5rem;
}

/* Blog tile styles */
.portfolio-blog-tile {
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    box-sizing: border-box;
    line-height: inherit;
    color: rgb(var(--foreground-rgb));
    display: flex;
    flex-direction: column;
    row-gap: 0.25rem;
    border: 0 solid transparent;
    width: 100%;
    margin-bottom: 1.5rem;
}

.portfolio-blog-date {
    font-size: 11px;
    opacity: 0.7;
    margin: 0;
    letter-spacing: 0.025rem;
}

.portfolio-blog-title {
    font-size: 16.5px;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    margin: 0;
    font-family: Inter, sans-serif;
}

.portfolio-blog-title-link {
    color: inherit;
    text-decoration: none;
}

.portfolio-blog-title-link:hover {
    color: #79c0ff;
}

.portfolio-blog-desc {
    font-size: 14px;
    margin: 0;
    opacity: 0.7;
    font-weight: 400;
}

.portfolio-blog-tag {
    background-color: #374151;
    color: #fff;
    border-radius: 9999px;
    font-size: 0.875rem;
    padding: 2px 10px;
    margin-top: 0.25rem;
}

/* Experience tile styles */
.portfolio-experience-card-content {
    display: flex;
    flex-direction: row;
    width: 100%;
    column-gap: 0.5rem;
    box-sizing: border-box;
    align-items: center;
    gap: 2rem;
}

.portfolio-experience-logo {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
    border: 1px solid rgba(255, 255, 255, 0.5);
}

.portfolio-experience-content {
    display: flex;
    flex-direction: column;
    flex: 1 1 0%;
    row-gap: 0.25rem;
    box-sizing: border-box;
}

.portfolio-experience-date {
    font-size: 10px;
    opacity: 0.7;
    margin: 0;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-title {
    font-size: 16px;
    font-weight: 500;
    margin: 0;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-desc {
    font-size: 12px;
    opacity: 0.85;
    line-height: 1.5;
    letter-spacing: 0.05em;
    margin: 0;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-skill {
    background-color: #ffffff;
    color: #000000;
    border-radius: 9999px;
    padding: 4px 12px;
    font-size: 12px;
    margin-right: 6px;
    margin-top: 6px;
    display: inline-block;
    font-weight: 500;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-skills {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-top: 8px;
}

/* Social tiles */
.portfolio-social-tiles {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 0.5rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    width: 100%;
    user-select: none;
}

/* Dropdown for blog filter */
.portfolio-blog-filter {
    cursor: pointer;
    appearance: none;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    color: white;
    padding: 0.5rem 2rem 0.5rem 1rem;
    border-radius: 9999px;
    width: 120px;
    height: 36px;
}

.portfolio-blog-filter:hover {
    border-color: white;
}

/* Button style for Checkout all blogs */
.portfolio-button {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    font-feature-settings: normal;
    font-variation-settings: normal;
    -webkit-tap-highlight-color: transparent;
    -webkit-font-smoothing: antialiased;
    box-sizing: border-box;
    border: 0 solid #e5e7eb;
    text-decoration: inherit;
    display: inline-flex;
    align-items: center;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: hsla(0, 0%, 100%, 0.1);
    background-color: rgb(32, 32, 32);
    padding-left: 0.625rem;
    padding-right: 0.625rem;
    padding-top: 0.375rem;
    padding-bottom: 0.375rem;
    font-size: 14px;
    font-weight: 500;
    color: rgb(209, 213, 219);
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.15s;
}

.portfolio-button:hover {
    background-color: #374151;
}

.portfolio-button-icon {
    margin-left: 0.5rem;
    display: inline-flex;
    align-items: center;
}

.portfolio-button-div {
    margin-top: 16px;
}

/* Responsive design */
@media (max-width: 768px) {
    .text-4xl { font-size: 1.75rem; }
    .text-3xl { font-size: 1.875rem; }
    .portfolio-container { padding: 1rem; }
    .portfolio-profile-pic { width: 60px; height: 60px; }
}

/* Timeline opacity */
.portfolio-timeline {
    opacity: 0.7;
}

================
File: pages\blog.py
================
import dash
from dash import html, dcc, Input, Output, callback
import dash_bootstrap_components as dbc
import json
from datetime import datetime
from components import BlogTile

app = dash.Dash(__name__)

# Load and sort blog data
try:
    with open('public/data.json', 'r') as f:
        data = json.load(f)
except Exception as e:
    print(f"Error loading data.json: {e}")
    data = {'blogData': []}

blog_data = sorted(
    data.get('blogData', []),
    key=lambda x: datetime.strptime(x.get('date_posted', 'January 1, 1900'), '%B %d, %Y'),
    reverse=True
)
all_tags = ['All'] + sorted(set(tag for blog in blog_data for tag in blog.get('tags', [])))

# Blog page layout
layout = html.Div([
    html.H2("Recent Writings", className='text-3xl font-semibold margin-bottom-md'),
    dcc.Dropdown(
        id='tag-filter',
        options=[{'label': tag, 'value': tag} for tag in all_tags],
        value='All',
        className='portfolio-blog-filter margin-bottom-md'
    ),
    html.Div(id='blog-list', className='portfolio-section margin-bottom-xl')
])

@callback(
    Output('blog-list', 'children'),
    Input('tag-filter', 'value')
)
def update_blogs(selected_tag):
    filtered_blogs = blog_data if selected_tag == 'All' else [b for b in blog_data if selected_tag in b.get('tags', [])]
    return [BlogTile(blog, show_tags=True) for blog in filtered_blogs] if filtered_blogs else [html.P("No blog posts available.", className='text-medium text-gray-400')]

================
File: pages\home.py
================
import dash
from dash import html, dcc
import dash_bootstrap_components as dbc
import json
from datetime import datetime
from components import BlogTile, ExperienceTile, SocialTiles
import dash_svg as svg

# Load data from JSON file
try:
    with open('public/data.json', 'r') as f:
        data = json.load(f)
except Exception as e:
    print(f"Error loading data.json: {e}")
    data = {'workExperience': [], 'blogData': []}

# Sort blog data by date
recent_blogs = sorted(
    data.get('blogData', []),
    key=lambda x: datetime.strptime(x.get('date_posted', 'January 1, 1900'), '%B %d, %Y'),
    reverse=True
)[:2]

# Home page layout
layout = html.Div([
    html.Div([
        html.Img(
            src='/assets/images/profile.jpg',
            className='portfolio-profile-pic'
        ),
        html.H1(
            "Hey, I'm Aditya.",
            className='text-3xl font-semibold margin-top-lg',
            style={'marginBottom': '0'}
        ),
        SocialTiles(),
        html.P(
            "I’m a tech enthusiast who just can’t get enough of AI and machine learning — basically, if it’s got code and a bit of brainpower, I’m in. When I’m not busy making bots smarter or wrangling data, I’m probably diving into some book by Camus or Sartre or pretending I can sing well enough to perform (spoiler: I can’t). Balancing tech and creativity keeps things interesting and my brain from turning into a dry circuit board.",
            className='text-large margin-top-md',
            style={'marginBottom': '0'}
        ),
        html.P(
            "I’m all about pushing AI to be more helpful and less like that one confused robot in every sci-fi movie. My goal? To get into research and build AI that actually gets humans, not just runs on fancy algorithms. For now, I’m having fun learning, experimenting, and dreaming about a future where AI makes life easier -     and maybe even a little more fun.",
            className='text-large margin-top-md',
            style={'marginBottom': '0'}
        )
    ], className='portfolio-section', style={'marginTop': '0'}),
    html.Div([
        html.H2("Work Experience", className='text-3xl font-semibold margin-bottom-md'),
        html.Div([ExperienceTile(exp) for exp in data.get('workExperience', [])], className='portfolio-experience-card'),
        html.Div(style={'height': '64px'}),
    ], className='portfolio-section margin-bottom-xl'),
    html.Div([
        html.H2("Recent Writings", className='text-3xl font-semibold margin-bottom-md'),
        html.Div(
            [BlogTile(blog, show_tags=False) for blog in recent_blogs] if recent_blogs else 
            [html.P("No blog posts available.", className='text-medium text-gray-400 portfolio-blog-post')],
            className='portfolio-blog-card'
        ),
        html.Div(
            html.A([
            "Checkout all blogs",
            html.Span(
                svg.Svg([
                    svg.Path(d="M7 7h10v10"),
                    svg.Path(d="M7 17 17 7")
                ], 
                xmlns="http://www.w3.org/2000/svg", 
                width="14", 
                height="14", 
                viewBox="0 0 24 24", 
                fill="none", 
                stroke="currentColor",
                className="lucide lucide-arrow-up-right")
            , className='portfolio-button-icon')
        ], href='/blog', className='portfolio-button margin-bottom-md'), className='portfolio-button-div')
    ], className='portfolio-section margin-bottom-xl'),
    html.Div([
        html.H2("Get in touch", className='text-3xl font-semibold margin-bottom-md'),
        html.P(
            "I am actively seeking Summer 2025 internship opportunities to further expand my skills in software engineering. Feel free to reach out at sarthak.chauhan@sjsu.edu—let's connect!",
            className='text-medium margin-bottom-md'
        )
    ], className='portfolio-section margin-bottom-xl')
])

================
File: public\data.json
================
{
  "workExperience": [
    {
      "logo": "/assets/images/evva-logo.png",
      "title": "AI Engineer Intern",
      "company": "Evva Health",
      "start_date": "Oct 2024",
      "end_date": "Mar 2025",
      "roledesc": "Worked as an AI Engineer Intern on NLP and multimodal agent systems. Built and deployed LLM-driven FastAPI services, integrated vector DBs for retrieval, optimized prompt engineering and model routing, reduced latency and token usage, implemented voice-text pipelines, automated care plan generation via web scraping agents, and fine-tuned agents for health session monitoring.",
      "skills": ["Python", "FastAPI", "MongoDB", "PostgreSQL", "OpenAI API", "Playwright", "ScrapeGraphAI"]
    },
    {
      "logo": "/assets/images/letsai-logo.png",
      "title": "AI Engineer Intern",
      "company": "LetsAI Solutions",
      "start_date": "Mar 2025",
      "end_date": "Present",
      "roledesc": "Working as an AI Intern focusing on enhancing enterprise-grade agentic AI systems. Integrating and improving tools like CrewAI, Autogen, and Langflow to build scalable multi-agent architectures. Developing FastAPI backends and managing data storage with PostgreSQL and ChromaDB. Implementing LLM observability and traceability features to optimize A/B testing and decision transparency. Collaborating on system enhancements to improve AI agent performance and reliability.",
      "skills": ["Python", "FastAPI", "CrewAI", "Autogen", "Langflow", "ChromaDB", "PostgreSQL", "Alembic"]
    }
  ],
  "blogData": [
    {
      "title": "Why India has a steep dempgraphic dividend?",
      "desc": "Let's learn Demographic Dividend in 2 mins.",
      "date_posted": "December 21, 2024",
      "tags": ["India", "Culture"],
      "slug": "cant-beat-oauth2"
    },
    {
      "title": "Automate the boring stuff",
      "desc": "Organize screenshots with python and a dash of AI",
      "date_posted": "February 25, 2025",
      "tags": ["python", "automation"],
      "slug": "automate-the-boring-stuff"
    },
    {
      "title": "Can't beat OAuth2",
      "desc": "Let's learn open authentication (OAuth) in 2 mins.",
      "date_posted": "December 21, 2024",
      "tags": ["security", "web"],
      "slug": "cant-beat-oauth2"
    }
  ]
}
