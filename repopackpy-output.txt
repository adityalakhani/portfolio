================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-06-15T23:54:42.974982

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
__pycache__\components.cpython-312.pyc
__pycache__\utils.cpython-312.pyc
app.py
assets\Resume.pdf
assets\globals.css
assets\images\evva-logo.png
assets\images\letsai-logo.png
assets\images\profile.jpg
components.py
pages\__pycache__\blog.cpython-312.pyc
pages\__pycache__\home.cpython-312.pyc
pages\blog.py
pages\home.py
posts\automate-the-boring-stuff.md
posts\cant-beat-oauth2.md
posts\why-india-demographic-dividend.md
public\data.json
requirements.txt
utils.py

================================================================
Repository Files
================================================================

================
File: app.py
================
import dash
from dash import html, dcc, Input, Output
import dash_bootstrap_components as dbc
import json
from pages import home, blog
import dash_svg as svg
from utils import load_markdown_posts

app = dash.Dash(__name__, suppress_callback_exceptions=True)

# Load work experience data from JSON file
try:
    with open('public/data.json', 'r') as f:
        data = json.load(f)
except Exception as e:
    print(f"Error loading data.json: {e}")
    data = {'workExperience': []}

# Load blog posts from Markdown files
blog_posts = load_markdown_posts()

# Dynamic navbar generator
def create_navbar(pathname):
    def is_active(path):
        return 'portfolio-nav-link active' if pathname == path else 'portfolio-nav-link'

    return html.Div(
        html.Nav(
            html.Div(
                [
                    # Left-side navigation
                    html.Div(
                        [
                            html.Span('/', className='portfolio-nav-separator'),
                            dcc.Link('home', href='/', className=is_active('/')),
                            html.Span('/', className='portfolio-nav-separator'),
                            dcc.Link('writings', href='/blog', className=is_active('/blog'))
                        ],
                        className='portfolio-nav-links'
                    ),
                    # Right-side social icons
                    html.Div(
                        [
                            html.A(
                                svg.Svg([
                                    svg.Path(d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z")
                                ], width='20', height='20', fill='currentColor', viewBox='0 0 24 24', xmlns='http://www.w3.org/2000/svg'),
                                href='https://www.linkedin.com/in/lakhaniaditya/',
                                target='_blank',
                                rel='noopener noreferrer',
                                className='portfolio-social-link'
                            ),
                            html.A(
                                svg.Svg([
                                    svg.Path(d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12")
                                ], width='20', height='20', fill='currentColor', viewBox='0 0 24 24', xmlns='http://www.w3.org/2000/svg'),
                                href='https://github.com/adityalakhani',
                                target='_blank',
                                rel='noopener noreferrer',
                                className='portfolio-social-link'
                            ),
                        ],
                        className='portfolio-social-links'
                    )
                ],
                className='portfolio-nav-container'
            )
        ),
        className='portfolio-nav'
    )

# App layout
app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.Div(id='navbar'),
    html.Div(id='page-content', className='portfolio-container')
])

@app.callback(
    [Output('navbar', 'children'), Output('page-content', 'children')],
    Input('url', 'pathname')
)
def display_page(pathname):
    navbar = create_navbar(pathname)

    if pathname == '/blog':
        return navbar, blog.layout
    elif pathname.startswith('/blog/'):
        slug = pathname.split('/')[-1]
        blog_post = next((b for b in blog_posts if b['slug'] == slug), None)
        if blog_post:
            return navbar, html.Div([
                html.H1(blog_post['title'], className='text-4xl font-bold margin-bottom-md'),
                html.P(f"Posted on: {blog_post['date_posted']}", className='text-small text-gray-400 margin-bottom-sm'),
                html.P(blog_post['desc'], className='text-large margin-bottom-md'),
                dcc.Markdown(blog_post['content'], className='portfolio-blog-content', dangerously_allow_html=True)
            ], className='portfolio-blog-post')
        return navbar, html.Div("404 - Not Found", className='text-xl text-center')

    return navbar, home.layout

if __name__ == '__main__':
    app.run(debug=True)

================
File: components.py
================
from dash import html
from dash_iconify import DashIconify

def BlogTile(blog, show_tags=True):
    """Component for rendering a blog tile, consistent with BlogTile.jsx"""
    return html.Div([
        html.P(
            blog.get('date_posted', 'N/A'),
            className='portfolio-blog-date portfolio-timeline'
        ),
        html.A(
            html.H3(
                blog['title'],
                className='portfolio-blog-title'
            ),
            href=f"/blog/{blog['slug']}",
            className='portfolio-blog-title-link'
        ),
        html.P(
            blog['desc'],
            className='portfolio-blog-desc'
        ),
        html.Div(
            [
                html.Span(
                    f"#{tag}",
                    className='portfolio-blog-tag'
                ) for tag in blog.get('tags', [])
            ] if show_tags else [],
            className='flex-gap-sm',
            style={'marginTop': '0.5rem'}
        )
    ], className='portfolio-blog-card')

def ExperienceTile(work):
    """Component for rendering an experience tile, consistent with ExperienceTile.jsx"""
    return html.Div([
        html.Div([
            # Optional company logo
            html.Img(
                src=work.get('logo', ''),
                className='portfolio-experience-logo',
                style={'display': 'block' if work.get('logo') else 'none'}
            ),
            html.Div([
                html.P(
                    f"{work['start_date']} - {work['end_date']}",
                    className='portfolio-experience-date portfolio-timeline'
                ),
                html.H3(
                    f"{work['title']}, {work['company']}",
                    className='portfolio-experience-title'
                ),
                html.P(
                    work['roledesc'],
                    className='portfolio-experience-desc'
                ),
                html.Div(
                    [
                        html.Span(
                            skill,
                            className='portfolio-experience-skill'
                        ) for skill in work.get('skills', [])
                    ],
                    className='portfolio-experience-skills'
                )
            ], className='portfolio-experience-content')
        ], className='portfolio-experience-card-content')
    ], className='portfolio-experience-card')

def SocialTiles():
    """Component for rendering social media links, consistent with SocialTiles.jsx"""
    return html.Div([
        html.A(
            DashIconify(icon="lucide:github", width=18, height=18),
            href="https://github.com/adityalakhani",
            className='portfolio-social-link'
        ),
        html.A(
            DashIconify(icon="lucide:file", width=18, height=18),
            href="/Resume.pdf",
            className='portfolio-social-link'
        ),
        html.A(
            DashIconify(icon="lucide:linkedin", width=18, height=18),
            href="https://www.linkedin.com/in/lakhaniaditya/",
            className='portfolio-social-link'
        ),
        # html.A(
        #     DashIconify(icon="lucide:instagram", width=18, height=18),
        #     href="https://www.instagram.com/thecortguy/",
        #     className='portfolio-social-link'
        # ),
        # html.A(
        #     DashIconify(icon="lucide:dribbble", width=18, height=18),
        #     href="https://dribbble.com/Sarthakischauhan",
        #     className='portfolio-social-link'
        # ),
    ], className='portfolio-social-tiles')

================
File: utils.py
================
import os
import markdown
import frontmatter
from datetime import datetime

def load_markdown_posts(posts_dir='posts'):
    """Load and parse Markdown files from the posts directory."""
    posts = []
    if not os.path.exists(posts_dir):
        print(f"Posts directory '{posts_dir}' not found.")
        return posts

    required_fields = ['title', 'desc', 'date_posted', 'tags', 'slug']
    default_values = {
        'title': 'Untitled Post',
        'desc': 'No description provided.',
        'date_posted': 'January 1, 1900',
        'tags': [],
        'slug': ''
    }

    for filename in os.listdir(posts_dir):
        if filename.endswith('.md'):
            filepath = os.path.join(posts_dir, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    raw_content = f.read()
                    post = frontmatter.loads(raw_content)
                    metadata = post.metadata

                    # Log raw content if metadata is empty
                    if not metadata:
                        print(f"Empty metadata in {filename}: Likely malformed YAML or missing '---'.")
                        print(f"Raw content (first 200 chars):\n{raw_content[:200]}...")
                        continue

                    # Validate required fields, apply defaults
                    for field in required_fields:
                        if field not in metadata:
                            print(f"Warning: {filename} missing field '{field}'. Using default: {default_values[field]}")
                            metadata[field] = default_values[field]

                    # Ensure tags is a list
                    if not isinstance(metadata.get('tags', []), list):
                        print(f"Warning: {filename} 'tags' is not a list. Using default: []")
                        metadata['tags'] = default_values['tags']

                    # Set default slug if not provided
                    if not metadata['slug']:
                        metadata['slug'] = filename[:-3]  # Use filename without .md

                    # Store raw Markdown content instead of converting to HTML
                    metadata['content'] = post.content
                    posts.append(metadata)
            except Exception as e:
                print(f"Error processing {filename}: {e}")
                print(f"Raw content (first 200 chars):\n{raw_content[:200]}...")
                continue

    # Sort posts by date_posted in descending order
    try:
        return sorted(
            posts,
            key=lambda x: datetime.strptime(x.get('date_posted', 'January 1, 1900'), '%B %d, %Y'),
            reverse=True
        )
    except ValueError as e:
        print(f"Error sorting posts: {e}")
        return posts

================
File: assets\globals.css
================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@200;400;500&family=IBM+Plex+Mono:wght@100;300;400&display=swap');

/* Root variables for dark theme */
:root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 15, 17, 42;
    --background-end-rgb: 15, 17, 42;
    --background-start-hex: #111010;
    --font-inter: Inter, sans-serif;
}

/* Ensure body and html don’t constrain width */
html, body {
    width: 100%;
    margin: 0;
    padding: 0;
    font-family: var(--font-inter);
    color: rgb(var(--foreground-rgb));
    background: var(--background-start-hex);
    line-height: 1.6;
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
}

/* Container */
.portfolio-container {
    display: flex;
    flex-direction: column;
    max-width: 50rem;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;
    padding: 0;
    box-sizing: border-box;
}

/* Navbar container */
.portfolio-nav-container {
    max-width: 50rem;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    align-items: center;
    -webkit-font-smoothing: antialiased;
    user-select: none;
    font-family: var(--font-inter);
    box-sizing: border-box;
    border: 0 solid transparent;
}

/* Navigation bar */
.portfolio-nav {
    padding: 16px;
}

/* Navigation links container */
.portfolio-nav-links {
    display: flex;
    align-items: center;
}

/* Navigation link */
/* Navigation link base */
.portfolio-nav-link {
    font-size: 1.125rem;
    color: #9ca3af; /* Default gray: rgb(156, 163, 175) */
    transition: color 0.2s;
    letter-spacing: 0.05em;
    font-weight: 400;
    text-decoration: none;
}

.portfolio-nav-link:hover {
    color: #ffffff;
}

/* Active link override */
.portfolio-nav-link.active {
    color: #ffffff;
    font-weight: 500;
}

/* Social links container */
.portfolio-social-links {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-left: auto;
}

/* Social link */
.portfolio-social-link {
    color: #9ca3af;
    transition: color 0.2s;
    display: inline-block;
}

/* Text utilities */
.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-large { font-size: 1rem; line-height: 1.75rem; }
.text-medium { font-size: 1rem; line-height: 1.5rem; }
.text-small { font-size: 0.875rem; line-height: 1.25rem; }
.font-bold { font-weight: 700; }
.font-semibold { font-weight: 600; }
.font-medium { font-weight: 500; }
.font-regular { font-weight: 400; }

/* Margin and padding utilities */
.margin-bottom-xs { margin-bottom: 0.25rem; }
.margin-bottom-sm { margin-bottom: 0.5rem; }
.margin-bottom-md { margin-bottom: 1rem; }
.margin-bottom-lg { margin-bottom: 1.5rem; }
.margin-bottom-xl { margin-bottom: 2rem; }
.padding-x-md { padding-left: 0.75rem; padding-right: 0.75rem; }
.padding-y-sm { padding-top: 0.25rem; padding-bottom: 0.25rem; }
.margin-right-sm { margin-right: 0.5rem; }
.margin-right-md { margin-right: 1rem; }
.margin-top-md { margin-top: 1rem; }
.margin-top-lg { margin-top: 1.5rem; }
.margin-top-xl { margin-top: 2rem; }
.margin-top-2xl { margin-top: 2.5rem; }
.margin-top-3xl { margin-top: 4rem; }

/* Border and background utilities */
.rounded-full { border-radius: 9999px; }
.border { border-width: 1px; }
.border-white-50 { border-color: rgba(255, 255, 255, 0.5); }
.bg-transparent { background-color: transparent; }
.bg-gray-700 { background-color: #4b5563; }
.bg-white { background-color: #ffffff; }

/* Color utilities */
.text-gray-400 { color: #9ca3af; }
.text-white { color: #ffffff; }
.text-black { color: #000000; }
.text-blue-400 { color: #79c0ff; }
.hover-text-blue-400:hover { color: #79c0ff; }
.hover-text-white:hover { color: #ffffff; }

/* Flex utilities */
.flex-gap-xs { display: flex; gap: 0.125rem; }
.flex-gap-sm { display: flex; gap: 0.5rem; }
.flex-gap-md { display: flex; gap: 1rem; }
.flex-wrap { flex-wrap: wrap; }

/* Other utilities */
.letter-spacing-wide { letter-spacing: 0.05em; }
.transition-colors { transition-property: color; transition-duration: 0.2s; }

/* Profile picture */
.portfolio-profile-pic {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid white;
}

/* Sections */
.portfolio-section {
    margin-top: 4rem;
    margin-bottom: 2rem;
}

/* Work and blog items */
.portfolio-experience-card {
    margin-top: 48px;
    border-radius: 8px;
}

.portfolio-blog-card {
    display: flex;
    flex-direction: column;
    row-gap: 0.25rem;
    margin-top: 24px;
    border-radius: 8px;
}

/* Blog post */
.portfolio-blog-post {
    margin-top: 2.5rem;
}

/* Blog content */
.portfolio-blog-content {
    font-size: 1rem;
    line-height: 1.75rem;
    color: #ffffff;
}

.portfolio-blog-content h1 {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #ffffff;
}

.portfolio-blog-content h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #ffffff;
}

.portfolio-blog-content p {
    margin-bottom: 1rem;
    color: #d1d5db;
}

.portfolio-blog-content ul, .portfolio-blog-content ol {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    color: #d1d5db;
}

.portfolio-blog-content li {
    margin-bottom: 0.5rem;
}

.portfolio-blog-content code {
    background-color: #374151;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: 'IBM Plex Mono', monospace;
    color: #ffffff;
}

.portfolio-blog-content pre {
    background-color: #374151;
    padding: 1rem;
    border-radius: 8px;
    overflow-x: auto;
    margin-bottom: 1rem;
    font-family: 'IBM Plex Mono', monospace;
    color: #ffffff;
}

.portfolio-blog-content pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
}

.portfolio-blog-content blockquote {
    border-left: 4px solid #79c0ff;
    padding-left: 1rem;
    margin-bottom: 1rem;
    color: #d1d5db;
}

.portfolio-blog-content hr {
    border: 0;
    border-top: 1px solid #4b5563;
    margin: 1.5rem 0;
}

.portfolio-blog-content a {
    color: #79c0ff;
    text-decoration: none;
}

.portfolio-blog-content a:hover {
    text-decoration: underline;
}

.portfolio-blog-content table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1rem;
}

.portfolio-blog-content th, .portfolio-blog-content td {
    border: 1px solid #4b5563;
    padding: 0.5rem;
    text-align: left;
}

.portfolio-blog-content th {
    background-color: #374151;
    font-weight: 600;
}

/* Blog tile styles */
.portfolio-blog-tile {
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    box-sizing: border-box;
    line-height: inherit;
    color: rgb(var(--foreground-rgb));
    display: flex;
    flex-direction: column;
    row-gap: 0.25rem;
    border: 0 solid transparent;
    width: 100%;
    margin-bottom: 1.5rem;
}

.portfolio-blog-date {
    font-size: 11px;
    opacity: 0.7;
    margin: 0;
    letter-spacing: 0.025rem;
}

.portfolio-blog-title {
    font-size: 16.5px;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    margin: 0;
    font-family: Inter, sans-serif;
}

.portfolio-blog-title-link {
    color: inherit;
    text-decoration: none;
}

.portfolio-blog-title-link:hover {
    color: #79c0ff;
}

.portfolio-blog-desc {
    font-size: 14px;
    margin: 0;
    opacity: 0.7;
    font-weight: 400;
}

.portfolio-blog-tag {
    background-color: #374151;
    color: #fff;
    border-radius: 9999px;
    font-size: 0.875rem;
    padding: 2px 10px;
    margin-top: 0.25rem;
}

/* Experience tile styles */
.portfolio-experience-card-content {
    display: flex;
    flex-direction: row;
    width: 100%;
    column-gap: 0.5rem;
    box-sizing: border-box;
    align-items: center;
    gap: 2rem;
}

.portfolio-experience-logo {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
    border: 1px solid rgba(255, 255, 255, 0.5);
}

.portfolio-experience-content {
    display: flex;
    flex-direction: column;
    flex: 1 1 0%;
    row-gap: 0.25rem;
    box-sizing: border-box;
}

.portfolio-experience-date {
    font-size: 12px;
    opacity: 0.7;
    margin: 0;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-title {
    font-size: 16px;
    font-weight: 500;
    margin: 0;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-desc {
    font-size: 12px;
    opacity: 0.85;
    line-height: 1.5;
    letter-spacing: 0.05em;
    margin: 0;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-skill {
    background-color: #ffffff;
    color: #000000;
    border-radius: 9999px;
    padding: 4px 12px;
    font-size: 12px;
    margin-right: 6px;
    margin-top: 6px;
    display: inline-block;
    font-weight: 500;
    font-family: var(--font-inter, Inter, sans-serif);
}

.portfolio-experience-skills {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-top: 8px;
}

/* Social tiles */
.portfolio-social-tiles {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 0.5rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    width: 100%;
    user-select: none;
}

/* Dropdown for blog filter */
.portfolio-blog-filter {
    width: 120px;
    height: 2.25rem; /* 36px */
    background-color: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    border-radius: 9999px;
    padding-left: 0.75rem;  /* 12px */
    padding-right: 2rem;    /* for space after text */
    font-size: 0.875rem;    /* 14px */
    line-height: 1.25rem;   /* 20px */
    font-family: var(--font-inter), sans-serif;
    color: rgba(255, 255, 255);
    cursor: pointer;
    appearance: none;
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.2s;
    position: relative;
}

/* HOVER & FOCUS STATES */
.portfolio-blog-filter:hover {
    border-color: white;
    color: rgba(255, 255, 255, 1);
}

/* SELECT CONTROL OVERRIDE */
.portfolio-blog-filter .Select-control {
    color: rgba(255, 255, 255, 0.95);
    background: transparent !important;
    border: none !important;
    cursor: pointer;
    box-shadow: none !important;
    padding: 0;
    min-height: unset;
    height: 2.25rem;
}

/* SELECT VALUE */
.portfolio-blog-filter .Select-value-label {
    color: rgba(255, 255, 255, 1);
    line-height: 2.25rem;
}

/* ARROW CUSTOMIZATION — REMOVE DEFAULT */
.portfolio-blog-filter .Select-arrow-zone {
    display: none;
}

/* CUSTOM CHEVRON ICON */
.portfolio-blog-filter::after {
    content: '';
    display: block;
    pointer-events: none;
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1rem;
    height: 1rem;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="%23ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>');
    background-repeat: no-repeat;
    background-position: center;
    background-size: 1rem 1rem;
    opacity: 0.5;
}

/* DROPDOWN MENU */
.portfolio-blog-filter .Select-menu-outer {
    background-color: #111010;
    border-radius: 8px;
    margin-top: 4px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    z-index: 10;
    color: white;
}

/* DROPDOWN OPTIONS */
.portfolio-blog-filter .Select-option {
    color: #ffffff;
    background-color: transparent;
}

.portfolio-blog-filter .Select-option:hover,
.portfolio-blog-filter .Select-option.is-focused {
    background-color: #374151;
}

.portfolio-blog-filter.has-value.Select--single > .Select-control .Select-value .Select-value-label {
    color: rgba(255, 255, 255, 0.8) !important;
}

/* SELECTED OPTION */
.portfolio-blog-filter .Select-option.is-selected {
    background-color: #374151;
    color: #ffffff;
    font-weight: 500;
}

/* REMOVE CLEAR ICON */
.portfolio-blog-filter .Select-clear-zone {
    display: none;
}

/* PLACEHOLDER STYLING */
.portfolio-blog-filter .Select-placeholder {
    color: rgba(255, 255, 255, 0.8);
}

/* Button style for Checkout all blogs */
.portfolio-button {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    font-feature-settings: normal;
    font-variation-settings: normal;
    -webkit-tap-highlight-color: transparent;
    -webkit-font-smoothing: antialiased;
    box-sizing: border-box;
    border: 0 solid #e5e7eb;
    text-decoration: inherit;
    display: inline-flex;
    align-items: center;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: hsla(0, 0%, 100%, 0.1);
    background-color: rgb(32, 32, 32);
    padding-left: 0.625rem;
    padding-right: 0.625rem;
    padding-top: 0.375rem;
    padding-bottom: 0.375rem;
    font-size: 14px;
    font-weight: 500;
    color: rgb(209, 213, 219);
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.15s;
}

.portfolio-button:hover {
    background-color: #374151;
}

.portfolio-button-div {
    margin-top: 16px;
}

.portfolio-button-icon {
    margin-left: 0.5rem;
    display: inline-flex;
    align-items: center;
}

/* Responsive design */
@media (max-width: 768px) {
    .text-4xl { font-size: 1.75rem; }
    .text-3xl { font-size: 1.875rem; }
    .portfolio-container { padding: 1rem; }
    .portfolio-profile-pic { width: 60px; height: 60px; }
}

/* Timeline opacity */
.portfolio-timeline {
    opacity: 0.7;
}

================
File: pages\blog.py
================
import dash
from dash import html, dcc, Input, Output, callback
import dash_bootstrap_components as dbc
from utils import load_markdown_posts
from components import BlogTile

app = dash.Dash(__name__)

# Load and sort blog data
blog_data = load_markdown_posts()
all_tags = ['All'] + sorted(set(tag for blog in blog_data for tag in blog.get('tags', [])))

# Blog page layout
layout = html.Div([
    html.Div([
    html.H2("Recent Writings", className='text-3xl font-semibold', style={'margin': '0'}),
    dcc.Dropdown(
        id='tag-filter',
        options=[{'label': tag, 'value': tag} for tag in all_tags],
        value='All',
        className='portfolio-blog-filter'
    )
    ], style={
        'display': 'flex',
        'justifyContent': 'space-between',
        'alignItems': 'center',
        'flexWrap': 'wrap',  # Optional: helps on smaller screens
    }),  # Optional container for better stacking
    
    html.Div(id='blog-list', className='portfolio-section margin-bottom-xl', style={'marginTop': '16px'})
])

@callback(
    Output('blog-list', 'children'),
    Input('tag-filter', 'value')
)
def update_blogs(selected_tag):
    filtered_blogs = blog_data if selected_tag == 'All' else [b for b in blog_data if selected_tag in b.get('tags', [])]
    return [BlogTile(blog, show_tags=True) for blog in filtered_blogs] if filtered_blogs else [html.P("No blog posts available.", className='text-medium text-gray-400')]

================
File: pages\home.py
================
import dash
from dash import html, dcc
import dash_bootstrap_components as dbc
import json
from utils import load_markdown_posts
from components import BlogTile, ExperienceTile, SocialTiles
import dash_svg as svg

# Load work experience data from JSON file
try:
    with open('public/data.json', 'r') as f:
        data = json.load(f)
except Exception as e:
    print(f"Error loading data.json: {e}")
    data = {'workExperience': []}

# Load recent blog posts
recent_blogs = load_markdown_posts()[:2]

# Log blog posts for debugging
for blog in recent_blogs:
    if 'title' not in blog:
        print(f"Invalid blog post missing title: {blog}")

# Home page layout
layout = html.Div([
    html.Div([
        html.Img(
            src='/assets/images/profile.jpg',
            className='portfolio-profile-pic'
        ),
        html.H1(
            "Hey, I'm Aditya.",
            className='text-3xl font-semibold margin-top-lg',
            style={'marginBottom': '0'}
        ),
        SocialTiles(),
        html.P(
            "I’m a tech enthusiast who just can’t get enough of AI and machine learning — basically, if it’s got code and a bit of brainpower, I’m in. When I’m not busy making bots smarter or wrangling data, I’m probably diving into some book by Camus or Sartre or pretending I can sing well enough to perform (spoiler: I can’t). Balancing tech and creativity keeps things interesting and my brain from turning into a dry circuit board.",
            className='text-large margin-top-md',
            style={'marginBottom': '0'}
        ),
        html.P(
            "I’m all about pushing AI to be more helpful and less like that one confused robot in every sci-fi movie. My goal? To get into research and build AI that actually gets humans, not just runs on fancy algorithms. For now, I’m having fun learning, experimenting, and dreaming about a future where AI makes life easier -     and maybe even a little more fun.",
            className='text-large margin-top-md',
            style={'marginBottom': '0'}
        )
    ], className='portfolio-section', style={'marginTop': '0'}),
    html.Div([
        html.H2("Work Experience", className='text-3xl font-semibold margin-bottom-md'),
        html.Div([ExperienceTile(exp) for exp in data.get('workExperience', [])], className='portfolio-experience-card'),
        html.Div(style={'height': '64px'}),
    ], className='portfolio-section margin-bottom-xl'),
    html.Div([
        html.H2("Recent Writings", className='text-3xl font-semibold margin-bottom-md'),
        html.Div(
            [BlogTile(blog, show_tags=False) for blog in recent_blogs if 'title' in blog] if recent_blogs else 
            [html.P("No blog posts available.", className='text-medium text-gray-400 portfolio-blog-post')],
            className='portfolio-blog-card'
        ),
        html.Div(
            html.A([
            "Checkout all blogs",
            html.Span(
                svg.Svg([
                    svg.Path(d="M7 7h10v10"),
                    svg.Path(d="M7 17 17 7")
                ], 
                xmlns="http://www.w3.org/2000/svg", 
                width="14", 
                height="14", 
                viewBox="0 0 24 24", 
                fill="none", 
                stroke="currentColor",
                className="lucide lucide-arrow-up-right")
            , className='portfolio-button-icon')
        ], href='/blog', className='portfolio-button margin-bottom-md'), className='portfolio-button-div')
    ], className='portfolio-section margin-bottom-xl'),
    html.Div([
        html.H2("Get in touch", className='text-3xl font-semibold margin-bottom-md'),
        html.P(
            "If you’re building something cool where my skills can be of some use or just want to nerd out over philosophy and machine learning, hit me up at lakhaniaditya3@gmail.com — always up for a good chat (or a questionable karaoke session).",
            className='text-medium margin-bottom-md'
        )
    ], className='portfolio-section margin-bottom-xl')
])

================
File: posts\automate-the-boring-stuff.md
================
---
title: Automate the Boring Stuff
desc: Organize screenshots with python and a dash of AI
date_posted: February 25, 2025
tags: [python, automation]
slug: automate-the-boring-stuff
---

# Automate the Boring Stuff

Tired of organizing screenshots manually? Let's automate it with Python and a sprinkle of AI!

## Step 1: Organize Files

Use Python's `os` module to scan a directory and move screenshots to folders based on their creation date.

```python
import os
import shutil
from datetime import datetime

def organize_screenshots(directory):
    for filename in os.listdir(directory):
        if filename.endswith(('.png', '.jpg')):
            filepath = os.path.join(directory, filename)
            creation_time = os.path.getctime(filepath)
            date_folder = datetime.fromtimestamp(creation_time).strftime('%Y-%m')
            dest_folder = os.path.join(directory, date_folder)
            os.makedirs(dest_folder, exist_ok=True)
            shutil.move(filepath, os.path.join(dest_folder, filename))

organize_screenshots("/path/to/screenshots")
```

## Step 2: Add AI for Tagging

Use an AI model (e.g., via OpenAI API) to generate tags for each screenshot based on its content.

```python
import openai

def tag_screenshot(image_path):
    # Placeholder for AI-based image tagging
    response = openai.Image.create(
        prompt=f"Describe the content of this image: {image_path}",
        n=1
    )
    tags = response['data'][0]['text'].split(',')
    return [tag.strip() for tag in tags]
```

Automate your workflow and save time!

================
File: posts\cant-beat-oauth2.md
================
---
title: Can't Beat OAuth2
desc: Let's learn open authentication (OAuth) in 2 mins.
date_posted: December 21, 2024
tags: [security, web]
slug: cant-beat-oauth2
---

OAuth2 is an **authorization framework** that allows third-party applications to access user resources **without exposing user credentials**.

>  Think of it as a valet key for your data ‚Äî limited access without giving away the whole keyring.

---

##  How It Works

1. **User** logs in via the **Authorization Server**.
2. Server returns an **Authorization Code** to the **Client App**.
3. Client app exchanges this code for an **Access Token**.
4. Client uses the access token to fetch data from the **Resource Server**.

---

##  Key Components

| Component           | Description                                 |
|---------------------|---------------------------------------------|
| `Authorization Server` | Authenticates user and issues tokens       |
| `Resource Server`       | Hosts user data (like profile, calendar) |
| `Client`                | The app requesting access                 |
| `Access Token`          | A short-lived token to access resources  |

---

##  Why Use OAuth2?

-  **Secure** ‚Äì Never shares user passwords
-  **Scalable** ‚Äì Widely adopted across platforms
-  **User-Friendly** ‚Äì Familiar flows (e.g., "Login with Google")

---

##  Example: OAuth2 Flow in Python

```python
import requests

# Step 1: Redirect user to authorization server
auth_url = (
    "https://auth-server.com/authorize?"
    "client_id=your_client_id&"
    "redirect_uri=your_redirect_uri&"
    "response_type=code"
)
print("Visit this URL to authorize:", auth_url)

# Step 2: Exchange authorization code for access token
code = "user_auth_code"  # You'd get this from the redirect URI
token_url = "https://auth-server.com/token"

response = requests.post(token_url, data={
    "client_id": "your_client_id",
    "client_secret": "your_client_secret",
    "code": code,
    "grant_type": "authorization_code",
    "redirect_uri": "your_redirect_uri"
})

access_token = response.json().get("access_token")
print("Access Token:", access_token)
```

>  **Note:** Never expose your `client_secret` in frontend code or public repos.

---

##  Learn More

Check out the official docs at [OAuth.net](https://oauth.net/2/)

---

üõ°Ô∏è OAuth2 makes modern apps secure and user-centric. Mastering it is a must for anyone building on the web today.
import Image from "next/image"
import BlogHeader from '../app/components/BlogHeader'

<BlogHeader date='2024-12-21'>
  <h1 className="m-0 p-0">Can't beat OAuth2.</h1>
  ## Let's learn **open authorization(OAuth)** in 2 mins. No prior knowledge needed
  <p className="tag">Tech</p>
  <p className="tag">2 min read</p>
  <p className="tag">Teaching</p>
</BlogHeader>

<blockquote className="border-l-4 border-info pl-4 italic my-6 mt-10 mb-0">
  Before starting let's keep these things in mind about OAuth:
  <ul className="list-disc">
    <li>Stands for Open Authorization (GO FOSS!)</li>
    <li>This a high level introduction, future part will cover implementation and in-depth information</li>
    <li>Used for Authorization and not authentication (there is a catch tho!)</li>
    <li>It is not our **lord and savior** but it solves a lot of things for us</li>
    <li>It does have security concerns</li>
  </ul>
</blockquote>

<div className="mt-10 mb-4">
<h1 className="m-0 p-0">**Why do we need it?**</h1>
</div>

Keeping it very short! To best understand the need of such a protocol we should look at how it helps us in our daily internet lives.

Imagine visiting a website that requires credentials before you can access its wonderful services (I see you, Chegg!). You go to their login page only to find that it asks for your email address and password. If you're like me, you'd be pissed by this absurdity. But then you spot those oddly shaped buttons at the bottom. Upon closer inspection, you realize they feature familiar faces, and you actually have accounts with some of them. After a few clicks, voila! you‚Äôre in the website and can go about your day.
All this couldn't have had happened without our darling OAuth protocol ü•Ç.

<div className="mt-6 mb-2">
<h2 className="m-0 p-0">**Authorization is not authentication**</h2>
</div>
At this point, you might have got some idea about OAuth. I would like to make it clear that OAuth is not an authentication technique it is an <span className="underline">**authorization**</span> technique. You might need to authenticate yourself to grant the necessary permissions but OAuth as a protocol does not care about authentication.
To understand the difference between **<ins>authentication</ins>** and <ins>**authorization**</ins>, consider what questions they ask individually.

<ul className="list-disc">
  <li> <ins>Authentication</ins> - **Who is it ?**</li>
  <li> <ins>Authorization</ins> - **What can they access?**</li>
  <li> <ins>Together they question</ins> - **Who is it and what can they access?**</li>
</ul>

So, Oauth just questions the **"What"** part of our security equation. **"Who"** part is a by-product and doesn't gurantee security by any means.
<blockquote className="border-l-4 border-quote pl-4 italic my-6 mt-4 mb-0">
  "Why do I need so many paasswordss! Can't it be simpler. Anyways my password is ..."
  <footer className="text-sm mt-2">‚Äî Miss Joe on a scam call</footer>
</blockquote>

<div className="mt-10 mb-4">
<h1 className="m-0 p-0">**How does it work?**</h1>
</div>
To explain in simple terms, we will take an example of the classic cryptography duo, Alice and Bob. Let's say Alice wants to view Bob's progress in the gym and decides to ask the gym for this information. It is important that the gym knows whether Alice is allowed to view the progress data. To tackle this, Bob can ask the gym to assign Alice a token that will serve as a testament to the fact that Bob has allowed Alice to view specific data on his behalf.
For all my visual learners, **Take a look at the image below**.

<div className="relative w-full lg:max-w-[50rem] mx-auto mt-[10px] mb-[10px]
 sm:max-w-[30rem] md:max-w-[50rem] p-4 border-[1.5px] border-imgborder rounded-[3px]"
 >
    <Image
      src="/nontech-oauth.png"
      alt="non-tech oauth information"
      width={300}
      height={333}
      className="rounded object-cover w-full"
      priority
    />
</div>

I hope the image does help you with your understanding of this protocol. I would also like to share a more techy diagram for this concept which we will discuss and explain in the next part.

<div className="relative w-full lg:max-w-[50rem] mx-auto mt-[10px] mb-[10px]
 sm:max-w-[30rem] md:max-w-[50rem] p-4 border-[1.5px] border-imgborder rounded-[3px]"
 >
    <Image
      src="/techintro-oauth.png"
      alt="non-tech oauth information"
      width={300}
      height={333}
      className="rounded object-cover w-full"
      priority
    />
</div>

<blockquote className="border-l-4 border-info pl-4 italic my-6 mt-2 mb-0">
  **NOTE :** OAuth protocol is infamous for being complex and confusing, while that discussion does have some weight, our focus on this technology for this part of blog, mainly revolves around its abstractions. 
</blockquote>

<div className="mt-10 mb-2">
<h1 className="m-0 p-0">**Next part....**</h1>
</div>

I would love to go over the code implementation of OAuth in <ins>**2 mins**</ins>. We will see what our sample **<ins>request</ins>** and **<ins>response</ins>** contains. My choice would be a javascript based auth library, <a className="underline text-hyperlink" href="https://www.authjs.dev">authjs.dev</a> . It makes OAuth insanely simple and intuitive.
I will update the link to second part here, untill then **See ya!**

================
File: posts\why-india-demographic-dividend.md
================
---
title: Why India has a steep demographic dividend?
desc: Let's learn Demographic Dividend in 2 mins.
date_posted: December 21, 2024
tags: [India, Culture]
slug: why-india-demographic-dividend
---

## Why India Has a Steep Demographic Dividend?

India's **demographic dividend** refers to the economic growth potential arising from its youthful population. Here's a quick breakdown:

###  Young Workforce
Over **50% of India's population is under 25**, providing a massive labor force.

###  Economic Impact
A higher working-age population can significantly boost GDP â€” **if** they're productively employed.

###  Challenges to Tackle

- **Education**: Need for quality education and skill development.
- **Jobs**: Urgent need to generate sufficient employment opportunities.
- **Healthcare**: A healthy workforce is essential for sustained productivity.

---

India's **window of opportunity** is open until around **2040**. Strategic investments in human capital **now** can help realize this potential.

> **Fun Fact**:  
> India's median age is **28**, compared to **38** in China and **48** in Japan!

================
File: public\data.json
================
{
  "workExperience": [
    {
      "logo": "/assets/images/evva-logo.png",
      "title": "AI Engineer Intern",
      "company": "Evva Health",
      "start_date": "Oct 2024",
      "end_date": "Mar 2025",
      "roledesc": "Worked as an AI Engineer Intern on NLP and multimodal agent systems. Built and deployed LLM-driven FastAPI services, integrated vector DBs for retrieval, optimized prompt engineering and model routing, reduced latency and token usage, implemented voice-text pipelines, automated care plan generation via web scraping agents, and fine-tuned agents for health session monitoring.",
      "skills": ["Python", "FastAPI", "MongoDB", "PostgreSQL", "OpenAI API", "Playwright", "ScrapeGraphAI"]
    },
    {
      "logo": "/assets/images/letsai-logo.png",
      "title": "AI Engineer Intern",
      "company": "LetsAI Solutions",
      "start_date": "Mar 2025",
      "end_date": "Present",
      "roledesc": "Working as an AI Intern focusing on enhancing enterprise-grade agentic AI systems. Integrating and improving tools like CrewAI, Autogen, and Langflow to build scalable multi-agent architectures. Developing FastAPI backends and managing data storage with PostgreSQL and ChromaDB. Implementing LLM observability and traceability features to optimize A/B testing and decision transparency. Collaborating on system enhancements to improve AI agent performance and reliability.",
      "skills": ["Python", "FastAPI", "CrewAI", "Autogen", "Langflow", "ChromaDB", "PostgreSQL", "Alembic"]
    }
  ]
}
